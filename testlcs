#!/usr/bin/env python

###################
# Aldrich de Mata #
###################

# Getting the longest common 
# subsequence of a string

'''Usage: ./lcs.py [filename]'''

import time
import sys

def lcs(xs, ys):
    nx = len(xs)
    ny = len(ys)
    table = dict()  #Implement a 2D hashtable
 
    #i=0..nx , j=0..ny
    for i in range(nx+1):     
        for j in range(ny+1): 
            if i == 0 or j == 0:
                table[i, j] = 0
            elif xs[i-1] == ys[j-1]: 
                table[i, j] = table[i-1, j-1] + 1
            else:
                table[i, j] = max(table[i-1, j], table[i, j-1])
             
 
    def subseq(i, j):
        # Use table to reconstruct the subsequence
        if i == 0 or j == 0:
            return "" 
        elif xs[i-1] == ys[j-1]:
            return subseq(i-1, j-1) + xs[i-1]
        elif table[i-1, j] > table[i, j-1]:
            return subseq(i-1, j)
        else:
            return subseq(i, j-1)
 
    return subseq(nx, ny)



if __name__ == '__main__':

  if len(sys.argv) < 2:
    sys.exit(__doc__)

  fh = None
  try:
    fh = open(sys.argv[1])
    for lines in [lines.strip() for lines in fh.readlines()]:
       if not lines:
          # Empty line
          print ''
          continue

       strseqs = lines.split(';')
       if not strseqs or len(strseqs) <= 1:
          # Missing delimiter
          print ''
          continue

       print lcs(strseqs[0], strseqs[1])
  except Exception, e:
    print e
    sys.exit(e)
  finally:
    if fh:
      fh.close()

